# Is only example for build docker image and pushed to storage when test was complete
# You can change it as you want

name: Build & Push Docker Image

on:
  workflow_run:
    workflows: ["Bun Test & Typecheck"]
    types:
      - completed
    branches:
      - main

jobs:
  build-and-push:
    # Run only if the triggering workflow succeeded and it was for the main branch
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.SECRET_TOKEN }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha
            # publish latest only for main
            type=raw,value=latest,enable=${{ github.event.workflow_run.head_branch == 'main' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./ci/dockerfile/backend-service.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Retain only 2 most recent GHCR versions (newest + one previous)
        env:
          GH_TOKEN: ${{ secrets.SECRET_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          # Determine whether OWNER is a User or Organization
          OWNER_TYPE=$(gh api -H "Accept: application/vnd.github+json" /users/${OWNER} --jq .type)
          if [ "$OWNER_TYPE" = "Organization" ]; then
            OWNER_PATH="/orgs/${OWNER}"
          else
            OWNER_PATH="/users/${OWNER}"
          fi

          # Package name for GHCR is the repository name (lowercase)
          REPO_NAME=${REPO#${OWNER}/}
          PKG_NAME=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]')

          echo "Listing container versions for ${OWNER}/${PKG_NAME}..."
          gh api -H "Accept: application/vnd.github+json" \
            ${OWNER_PATH}/packages/container/${PKG_NAME}/versions?per_page=100 > versions.json

          # Keep only the two most recent versions by created_at (newest and one previous)
          IDS_TO_DELETE=$(jq -r '
            sort_by(.created_at)
            | .[0:-2]
            | .[].id // empty
          ' versions.json)

          if [ -z "$IDS_TO_DELETE" ]; then
            echo "Nothing to delete (<= 2 versions present)."
            exit 0
          fi

          echo "Deleting old versions (keeping 2 newest): $IDS_TO_DELETE"
          for id in $IDS_TO_DELETE; do
            gh api -X DELETE -H "Accept: application/vnd.github+json" \
              ${OWNER_PATH}/packages/container/${PKG_NAME}/versions/${id}
          done
